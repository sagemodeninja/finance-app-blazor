@page "/totp"
@using Polly
@using System.Net
@using System.Net.Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using FinanceApp.Shared.Classes
@inject IAccessTokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<p>TOTP Demo</p>
@if(graphUser != null)
{
    if(!string.IsNullOrEmpty(message)) {
        <div>
            <p><span><b>Message:</b></span> @message</p>
        </div>
    }

    @if(user != null)
    {
        if(!user.HasRegisteredMFA)
        {
            <div style="height:100%;width:100%;display:flex;align-items:center;justify-content:center;">
            <BFUStack Horizontal="true">
                <BFUStackItem>
                    <QRCode Label="@user.Email"
                            Secret="@user.TOTPSecret"
                            Size="280" />
                </BFUStackItem>
                <BFUStackItem>
                    <BFUStack VerticalFill="true"
                              Tokens=@(new BFUStackTokens { ChildrenGap = new[] { 10.0 }, Padding = "15px" })>
                        <BFUStackItem>
                            <BFUText Variant=@TextType.Large
                                    Style="font-weight:700;">
                                    Additional security verification
                            </BFUText>
                        </BFUStackItem>
                        <BFUStackItem>
                            <BFUText Variant=@TextType.Small>
                                Secure your account by enabling <span style="font-weight:bold;">Multi-Factor Authentication</span>.
                            </BFUText>
                        </BFUStackItem>
                        <BFUStackItem>
                            <BFUText Variant=@TextType.Small>Complete the following steps to configure MFA through authenticator app.</BFUText>
                        </BFUStackItem>
                        <BFUStackItem>
                            <BFUStack Tokens=@(new BFUStackTokens { ChildrenGap = new[] { 10.0 }, Padding = "10px 0 10px 20px" })>
                                <BFUStackItem>
                                    <BFUText Variant=@TextType.Small>1. Install the Microsoft authenticator app for Windows Phone, Andriod or iOs.</BFUText>
                                </BFUStackItem>
                                <BFUStackItem>
                                    <BFUText Variant=@TextType.Small>2. In the app, add an account and choose "Work or school account".</BFUText>
                                </BFUStackItem>
                                <BFUStackItem>
                                    <BFUText Variant=@TextType.Small>3. Scan the QR code on the side.</BFUText>
                                </BFUStackItem>
                            </BFUStack>
                        </BFUStackItem>
                        <BFUStackItem>
                            <BFUText Variant=@TextType.Small>If the app displays a six-digit code, you are done!</BFUText>
                        </BFUStackItem>
                        <BFUStackItem Align=@Alignment.End>
                            <BFUPrimaryButton Text="Next"
                                              Style="font-size:12px;" />
                        </BFUStackItem>
                    </BFUStack>
                </BFUStackItem>
            </BFUStack>
            </div>

            if(mfaToken is null) {
                @* <BFUDefaultButton Text="Generate MFA Token"
                                OnClick=@GenerateMFATokenAsync /> *@
            }
            else
            {
                @* <BFUStack Horizontal="true"
                          Tokens=@(new BFUStackTokens { ChildrenGap = new[] { 10.0 } })>
                    <BFUStackItem>
                        <BFUDefaultButton Text="Validate MFA Token"
                                        OnClick=@ValidateMFATokenAsync />
                    </BFUStackItem>
                    <BFUStackItem>
                        <BFUDefaultButton Text="Clear MFA Token"
                                        OnClick=@ClearMFATokenAsync />
                    </BFUStackItem>
                </BFUStack> *@
            }

        }
        else if (user.EnableMFA)
        {
            <p>Ready for MFA!</p>
        }
        else
        {
            <p>MFA is disabled!</p>
        }
    }
    else
    {
        <BFUSpinner Label="Loading..."
                    LabelPosition=@SpinnerLabelPosition.Bottom
                    Size=@SpinnerSize.Medium>
        </BFUSpinner>
    }
}
else
{
    <BFUSpinner Label="Loading..."
                LabelPosition=@SpinnerLabelPosition.Bottom
                Size=@SpinnerSize.Medium>
    </BFUSpinner>
}

@code {
    GraphUser graphUser;
    User user;
    string message;
    bool isUserInfoLoaded = false;
    MFAToken mfaToken;

    protected override async Task OnInitializedAsync()
    {
        graphUser = await GetGraphUser();
        user = new User
        {
            AccountId = graphUser.AccountId,
            Email = graphUser.Mail
        };

        user = await GetUserAsync(graphUser);

        mfaToken = await sessionStorage.GetItemAsync<MFAToken>("MFAToken");
        await base.OnInitializedAsync();
    }

    async Task<GraphUser> GetGraphUser()
    {
        var retryPolicy = Policy.Handle<NullReferenceException>()
                                .WaitAndRetryAsync(5, retryAttempt => TimeSpan.FromSeconds(0.5));
                                
        AccessTokenResult tokenResult = await TokenProvider.RequestAccessToken(
                new AccessTokenRequestOptions
                {
                    Scopes = new[] { "https://graph.microsoft.com/User.Read" }
                });

        if (tokenResult.TryGetToken(out var token))
        {
            var client = ClientFactory.CreateClient("GraphAPI");
            return await retryPolicy.ExecuteAsync(async () => await client.GetFromJsonAsync<GraphUser>("v1.0/me"));
        }

        return default;
    }

    async Task<User> GetUserAsync(GraphUser graphUser)
    {
        Guid accountId = graphUser.AccountId;
        string email = graphUser.Mail;

        try
        {
            return await Http.GetFromJsonAsync<User>($"user/account/{accountId}");
        }
        catch (HttpRequestException ex)
        {
            if(ex.StatusCode == HttpStatusCode.NotFound)
            {
                User user = new User
                {
                    AccountId = accountId,
                    Email = email
                };

                return await AddUserAsync(user);
            }
            else
            {
                throw ex;
            }
        }
    }

    async Task<User> AddUserAsync(User user)
    {
        var response = await Http.PostAsJsonAsync("user", user);
        user = await response.Content.ReadFromJsonAsync<User>();
        
        message = $"Account {user.Email} was added.";
        return user;
    }

    async Task GenerateMFATokenAsync()
    {
        if(user != null) {
            mfaToken = await Http.GetFromJsonAsync<MFAToken>($"user/mfatoken/generate/{user.AccountId}");
            await sessionStorage.SetItemAsync<MFAToken>("MFAToken", mfaToken);

            message = "MFA token was created.";
        }
        else
        {
            message = "Error: User object is null.";
        }
    }

    async Task ValidateMFATokenAsync()
    {
        if(user != null) {
            HttpResponseMessage response = await Http.PutAsJsonAsync<MFAToken>($"user/mfatoken/validate", mfaToken);
            MFAToken token = await response.Content.ReadFromJsonAsync<MFAToken>();
            
            string isValid = token.IsValid ? "is" : "is not";
            message = $"MFA Token {isValid} valid.";
        }
        else
        {
            message = "Error: User object is null.";
        }
    }

    async Task ClearMFATokenAsync()
    {
        await sessionStorage.RemoveItemAsync("MFAToken");
        mfaToken = null;
        message = "MFA token was cleared.";
    }
}